# TODOTAGS
* Asegurarse que check.eval_measure da siempre None si no hay limits
* View.request_event(message, event) -> Esta orden debe esperar hasta que el usuario decida arrancar
* Children de caracteristicas debe tner un key tal que sea accesible. La estructura será un diccionario, no un listado
* inspector.get_part() da enlace a la pieza en test
* Los valores de las características serán de tipo Float en sqlalchemy
* Check.add_measure(value, characteristic, part, device)
* Check.add_failure(f_mode, characteristic, part, device)
* Check
- status
- failures -> tipo dict donde characteristic-key es el key
- measures -> tipo dict donde characteristic-key es el key
-
* El inspector tendrá un listado de devices llamado device_repo cuyas key serán los nombre de device(no keys!!!)
* Environment:
- Fields
  - dal
    - get_all_devices_by_process(value)
    - create_new_part(partnumber, node, batch_number)
    - get_part(serial_number)
    - get_test_plans(partnumber, process)
    - Session
    - prepare_db()
    - fill_db()
  - service
    - inspection
    - certification
    - BatchFinalController
    - SyncronizedRHController
    - TemperatureErrorController
    - RandomProductionController
  - view
    - BatchProductionView
    - SyncronizedRHView
    - TemperatureErrorView
* Domain
- Ubica todos los objetos de dominio a usar en los servicios. Dentro del dominio se incluye la capa de persistencia
- get_process_test_plan
** AutoTesterRunners
*** Estructura
   - Tiene una cola de ~orders~ donde recoge pedidos y ejecuta.
   - Tiene una cola de ~messages~ para informar al cliente de eventos durante el chequeo
*** Subclasses
    - PullRunner: La cola ~orders~ es gestionada por el proceso anterior
    - PushRunner: la cola ~orders~ es introducida por el proceso posterior
    - CavityRunners: Corre de forma independiente cualquiera de las cavidades que tiene para testear
* Services
- En rest.py se desarrollará el código para hacer el apirest usando para ello cherrypy
- En este directorio se ubicarán todos los recursos posibles a activar en el API Rest
** DigSigner
   - Realiza firmas digitales de documentos pdf.
   - /dig_signer
     - GET /{id}
       - Response:

** Mailer
   - Envía un email a través de API Rest
   - /mailer
     - POST: Envía un email
       - Request:
	 - json: {'template': string, 'fields':{}}
       - Response:
	 - status:
	   - 201: Email Enviado
	   - ...: Email no enviado
** AutoTester
   - Ejecuta tests automáticos
   - /tester
     - GET: Devuelve el estado del test, un listado de eventos
       - Response:
	 - status:
	   - 101: Proceso ejecutándose
	   - 200: Proceso finalizado / En espera
	   - 499: Proceso cancelado
	 - json: {'events': [{'object': {}, 'name': string, '(cavity)': int}...]}
     - POST: Arranca test, si está ocupado lo pone en cola
       - Request:
	 - json: {'item': {'part_number': string, 'serial_number': string}, '(cavity)': int}}
	 - header: Auth
       - Response:
	 - status:
	   - 201: Arrancado el proceso
	   - 499: No está configurado el útil
     - PUT: Configura el útil a la ubicación que tiene asignada, carga todos los devices de la ubicación
       - Request:
	 - json: {'location': string}
     - DELETE: Cancela el test actual, para poder arrancar el proceso se deberá hacer un PUT.
* Root
- Aquí se realizará el run.py con el que se corre el programa.
- run.py deberá recibir un archivo .yaml para poder configurarse.
- Aquí se puede configurar un entorno de test o un entorno de producción. La configuración de ambos entornos será por archivo yaml. development.yaml o production.yaml.
* Mocking API requests
- requests-mock el más utilizado
- requests-staticmock parece que está mas pensado?
- Se debe diseñar el API
* Service
** ApiRest
*** TODO Server loads with host and port
** Mail
*** TODO PUT- MailResource loads template
*** TODO POST- MailResource sends mail
** Sign
*** TODO PUT- SignResource loads a user certificate
*** TODO GET- SignResource supplies signed document
*** TODO POST- SignResource signs a doc
** Test
*** TODO PUT- TestResource is configured from location
*** TODO POST- TestResource is started test from part information
*** TODO POST- TestResource receives feedback from user
*** TODO GET- TestResource reports events
*** TODO GET- TestResource reports current parts under test
*** TODO GET- TestResource reports current state
*** TODO DEL- TestResource is stopped
*** TODO POST- TestResource is logged

* Commit plan
** DONE Testing service start, stop and restarts
** TODO Testing service retrieve events from cavities
** TODO Inspector .....
** TODO Test results saves on sqlite database
** TODO Implement data layer with sqlalchemy
** TODO Quality models are tested
** TODO Operations models are tested
** TODO Product models are tested
* States diagrams
#+BEGIN_SRC dot :file images/actions-states.png :var input=make-dot :exports results
Action {
 Open -> Started-> Done -> Closed
 Started -> Ongoing -> Done
 Cancelled
}
#+END_SRC

#+BEGIN_SRC dot :file images/operations-state.png :var input=make-dot :exports results
Operations {
 Open -> Started -> Walking -> Walked -> Done -> Closed
}
#+END_SRC
